# プロジェクト管理
- 仮想環境.venvを使用して管理する
- テストは.venv中のpythonを用いて実行する
- プロジェクトはuvを使って管理をする。ライブラリ追加はuvコマンドに基づく

# 採用技術
- 仮想環境のPython 3.10以降をランタイムとして使用する
- PythonのDBAPIに準拠するようにする
- pandasを使用する

# テスト
- pytestを使用したテストをtestsフォルダに作成。
- テストファイルは必ずソースファイルに対応した命名を持つ。tests\test_元ファイル名.pyとい名称でテストを作成する。
- 必要なデータもtestsフォルダに配置する
- Powershell環境のため、テスト時は pytest tests -v のみで実行(| catなし)

# ユーザー指示の強制力(重要)
- ユーザーがgitやテストなどのコマンド操作を指示した場合、指示されたコマンドを確実に実行まで完遂する。
- ユーザーがファイルを修正を指示した場合、指示されたファイルの更新を確実に実施し、完遂する。

# クラスの設計、メソッドの設計
## コメント
- 全てのコメントは英語と、それを翻訳した日本語で、２つのコメントを連続で記述する
- クラス全体、各メソッドの入出力には必ず詳細なコメントを生成する
- 修正を行った場合は、それにあわせて既存のコメントを修正する

## 単一責務
- クラスやメソッドは役割を持ち、少ない責務で維持する

## Loggerを不使用にする
- ロガーは使用せず、例外要因をメソッドから返却する
- 例外はDBAPIの例外を踏襲する
- 例外が発生した行のトレースを必ず保持するようにする
- 例外は英語で詳細にエラー内容が伝わるように記載する

## クラスの分類
- コメントを抜いて、200行を超える複雑な処理が必要であれば、専用に別クラスを設ける
- 複雑なSQL処理をステートメントごとに別クラスにし、そのクラスを呼び出すようにする

# 新規作成
- 作成しようとする、クラスの責務や分類が明確でない場合、ユーザーに確認する
- 作成しようとする、文書への指示が明確でない場合、ユーザーに確認する

# デバッグ、不具合解析(重要：必ず守る)
テストを実施し、テストがフェイルした場合、以下の手順を必ず守り、行単位の特定、説明をしてから修正を行う。
・1. 最初に不具合ログから、まずは動作状況を把握し説明する
・2. 絶対守る: __動作状況を理解して、不具合動作の原因箇所が行の水準で特定し、問題と原因を説明する。__
・3. 不具合原因が特定できない場合は、デバッグ用修正（printを追加）し、再度テストを実行する。
・4. 絶対守る:__ 修正の他動作への影響がない修正方法を検討し、修正の内容をユーザーに確認する。__
・5. 絶対守る:__「修正内容がユーザーに確認されたら」、ファイルを編集し修正をを行う。__
・6. 修正の他動作への影響がある場合は、修正方法を説明・検討する。

# exampleフォルダ
exampleフォルダは、ソースコードの代表的なクラスの使い方を説明するファイルでメイン関数から実行できるように作られている。
python example\example_ファイル名.pyで実行できる。
exampleフォルダは、ソースコードと一対一で対応していて、example_対応ソースコード名.pyという名称で作成する。

# README.md
・pandas/csvのDBAPIで非常に簡単な操作性が特徴のライブラリである点をユーザーに伝えてください。
またREADMEはに英語で記載し、その日本語をREADME_ja.mdを作成してください。
・README.mdは絵文字を使って楽しいものにしてください。
・README.mdでは現在サポートしているSQLを明確にしてください。
・サンプル事例を紹介し、簡単さを強調してください。

# テストの実行
- テストの実行はpytestを使用して実行する。
- テストの実行はpytest testsフォルダとして実行する。
- テストのファイル名と、そこに含まれるテストの一覧を作成し、その通過状況が分かるファイル tests/test_progress.mdを作成する。
- テストの実行結果はtests/test_result.mdに作成する。


