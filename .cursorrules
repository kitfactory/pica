# プロジェクト管理
- 仮想環境.venvを使用して管理する
- テストは.venv中のpythonを用いて実行する
- プロジェクトはuvを使って管理をする。ライブラリ追加はuvコマンドに基づく

# 採用技術
- 仮想環境のPython 3.10以降をランタイムとして使用する
- PythonのDBAPIに準拠するようにする
- pandasを使用する

# テスト
- pytestを使用したテストをtestsフォルダに作成。
- テストファイルは必ずソースファイルに対応した命名を持つ。tests\test_元ファイル名.pyとい名称でテストを作成する。
- 必要なデータもtestsフォルダに配置する

# クラスの設計、メソッドの設計

## コメント
- コメントは全て英語と、それを翻訳した日本語の併記で記述する
- クラス全体、各メソッドの入出力には必ず詳細なコメントを生成する
- 修正を行った場合は、それにあわせて既存のコメントを修正する

## 単一責務
- クラスやメソッドは役割を持ち、少ない責務で維持する

## Loggerを不使用にする
- ロガーは使用せず、例外要因をメソッドから返却する
- 例外はDBAPIの例外を踏襲する
- 例外が発生した行のトレースを必ず保持するようにする
- 例外は英語で詳細にエラー内容が伝わるように記載する

## クラスの分類
- コメントを抜いて、200行を超える複雑な処理が必要であれば、専用に別クラスを設ける
- 複雑なSQL処理をステートメントごとに別クラスにし、そのクラスを呼び出すようにする

# 編集方針
- ユーザーにコマンド操作、ファイル編集を指示された場合、必ず実施する
- 作成しようとするクラスの責務や分類が明確でない場合、ユーザーに確認する
- 指示に対して必要最小限の修正範囲を検討し、クラスやメソッドの修正に閉じた修正を行う。
- 複数ファイルの変更が必要になることが予想された場合、編集ファイルと編集内容をリストで計画を説明し、編集するか確認する。

# exampleフォルダ

exampleフォルダは、ソースコードの代表的なクラスの使い方を説明するファイルでメイン関数から実行できるように作られている。
python example\example_ファイル名.pyで実行できる。
exampleフォルダは、ソースコードと一対一で対応していて、example_対応ソースコード名.pyという名称で作成する。

# README.md

・pandas/csvのDBAPIで非常に簡単な操作性が特徴のライブラリである点をユーザーに伝えてください。
またREADMEはに英語で記載し、その日本語をREADME_ja.mdを作成してください。
・README.mdは絵文字を使って楽しいものにしてください。
・README.mdでは現在サポートしているSQLを明確にしてください。
・サンプル事例を紹介し、簡単さを強調してください。

# テストの実行

- テストの実行はpytestを使用して実行する。
- テストの実行はpytest testsフォルダとして実行する。
- テストのファイル名と、そこに含まれるテストの一覧を作成し、その通過状況が分かるファイル tests/test_progress.mdを作成する。
- テストの実行結果はtests/test_result.mdに作成する。

# デバッグ、不具合解析

テストを実施し、不具合修正を指示された場合、以下の手順で行う。

・不具合ログから、まずは解析した動作状態を把握し説明する
・動作状態を理解して、不具合動作の原因箇所が行の水準で特定できていない場合は、printを追加し、再度テストの実行を求める。
・不具合の箇所が完全に特定できた場合は、不具合要因を説明し、修正方法を検討する。
・修正方法を検討したら、他テスト動作へ影響する可能性が有るかを検討する。
・絶対守る: 修正の他動作への影響がなくなるよう修正方法を検討し、修正の内容をユーザーに確認する。
・絶対守る:__「修正内容がユーザーに確認されたら」__ 、ファイルを編集し修正をを行う。
・修正の他動作への影響がある場合は、修正方法を説明・検討する。
・不具合メッセージを除くよう指示された場合は、print文を削除してください。

